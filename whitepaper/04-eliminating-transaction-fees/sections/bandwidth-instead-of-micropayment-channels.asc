=== Bandwidth Instead of Micropayment Channels

The solution to the problems with micropayments is in implementing ​_dynamic fractional reserves_.
Under this model the blockchain will automatically adjust the reserve ratio for the network during times of congestion.
The blockchain will set a target utilization that leaves enough headroom for short term surges in demand.
Any time the surges are sustained the blockchain reduces the maximum bandwidth-per-share.
When a surge is over and there is surplus capacity the blockchain can slowly increase the bandwidth-per-share.

Bandwidth used by an individual user should be measured over a suitably long period of time to allow that user to time-shift their usage.
Users tend to login, do many things at once, then logout.
This means that their bandwidth over a short period of time may appear much higher than if viewed over a longer period of time.
If the time window is stretched too far then the reserve ratio will not adjust fast enough to respond to short-term surges, if the window is too short then clustering usage will have too big of an impact on normal users.
In our estimate it should be sufficient to measure the average weekly bandwidth usage of
users.
Every time a user signs a transaction, that transaction is factored into their own
individual moving average.
Any time a user’s moving average exceeds the current network limit their transaction is delayed until their average falls below the limit.

===== Example Implementation

Let `B` equal a user’s average bandwidth at time `T`.
Let `W` equal the number of seconds per week, and let `N` equal the size of the new transaction that occurred `S` seconds after `T`.
Given this information the blockchain can calculate the new average bandwidth for a user as:


    Bnew = MIN(0,B * (W­S) / W) + N * S / W
    Tnew = T + S


Each user is entitled to an average weekly bandwidth of:


    Let U = the user’s SP
    Let S = the total number of SP
    Let R = the current reserve ratio between 1 and Rmax
    Let C = the maximum block size capacity set by witnesses
    Let L = the total blocks per week
    Let M = C * L * R
    Allocation =  M * U / S


A user would be entitled to an average bandwidth of M * U / S.
Any time a transaction would cause the user’s average to go above this threshold they would be unable to transact until enough time passes to lower the average.
The network can increase the reserve ratio, anytime blocks are less than half the target
capacity and decrease it anytime they are more than half.
The algorithm used to adjust `R` ​is designed to react quickly to decrease the reserve ratio when there is a surge in demand, while acting slowly to increase the reserve ratio in period of low demand.
The minimum reserve ratio is 1, and the maximum reserve ratio should be calculated to prevent small stakeholders from consuming all of the available bandwidth.
If no one is using the available bandwidth then the reserve ratio can grow until a user with just 1 satoshi of the currency is able to transact every single block.


==== Case Study: Bitcoin

To understand how this algorithm would work on Bitcoin it is necessary to estimate a reasonable value for the reserve ratio, `R`, based on actual usage.
Based upon the total supply of 15M BTC and a daily transaction volume of 400K BTC^https://blockchain.info/charts/estimated-transaction-volume?showDataPoints=false&timespan=&show_header=true&daysAverageString=7&scale=0&address=[10]^, we can derive a minimum reserve ratio of 38 for Bitcoin.
Using the equations we can calculate the weekly bandwidth (in bytes) allowed per BTC to be:


   Let C = 1MB = 1024*1024
   Let L = 1008 (blocks per week)
   Let R = 38
   Let S = 14000000 BTC (supply minus Satoshi’s unmoving coins)
   Let U = 1 BTC
   CLR/S = 2869 bytes per week, or about 5 transactions/week per BTC


Since `R = 38` is a lower bound on the reserve ratio, `CLR/S` is a lower bound on the permitted bandwidth.
This simple case study suggests a user will require at most 0.20 BTC (over $80
as of this writing) to transact once per week.
However, this is a loose upper bound derived from the assumption that all BTC are equally mobile.
This is not the case -- users with dozens or hundreds of bitcoins do not necessarily transact dozens or hundreds of times a week!
The “leftover” transactions that those users “should” have made will increase the reserve ratio, allowing their unused bandwidth to be “recycled” for smaller users.

All of the above estimates are conservative upper bounds assuming coins and usage are distributed in a relatively flat manner.
The reality is that heavy users, such as exchanges, have a much higher coin-to-usage ratio than lighter users, which in turn means that actual minimum balance requirements are far lower.

===== Impact of Capacity

Blockchain capacity isn’t necessarily capped.
It is well within the technological capability of internet infrastructure to increase the Bitcoin block size to 10MB which in turn will reduce the minimum required balance by a factor of 10.
While Bitcoin currently supports about 3 transactions per second, alternative implementations are capable of over 1000 transactions per second.
This changes our conservative upper bound to 0.0006 BTC or about $0.25, meaning that an account holding $0.25 would be able to transact at least once per week on average (and likely many more times because we’re dealing with a fairly loose upper bound).

===== Maximum Number of Unique Users

We can use similar math to calculate the maximum number of unique users that the network can allow to transact once per week as: `B*W/T`.
`T` represents the average transaction size.
This means Bitcoin could support about 2 million users transacting once per week assuming each user had an equal balance.


===== Comparison to Fees

If we assume a user with $25 dollars worth of BTC transacts once per week and pays a $0.04 cent fee each time then they would pay over $2.00 in fees per year.
A user would have to earn a 8% rate of return on their $25 dollars just to break even with paying fees.
Chances are that users were going to hold their money on the blockchain anyway, so this user with $25
worth of BTC just saved $2 over the course of a year by adopting a rate-limiting approach rather than a fee-based approach.
With just $175 they could transact every single day and save $14 per year.


==== Account Creation

Steem’s account-based system with publicly known balances simplifies the implementation of the bandwidth-based rate limiting algorithm.
Any account with a balance below the minimum required to transact once per week would be unable to transact.
This implies that all new accounts should be funded with at least this minimum balance.
It also implies that users wishing to transact in smaller amounts can, so long as they hold a larger balance and reuse the account.
It is possible for a low-balance account created during a time of low usage to become inaccessible if the network usage picks up.
The funds could be recovered at any time by transferring a larger balance into the account.
In order to maintain a reasonable user experience with a minimum number of hung accounts, all new accounts should start out with a balance 10 times the minimum required to transact weekly.
This way even if demand increases by a factor of 10 the account will remain viable.
Any initial account balance would have to come from the user creating the account and not from token creation due to the potential for sybil attacks.

==== Justifying Minimum Balances

The concept of forcing users to maintain a minimum balance flows naturally from the value of a user^http://www.forbes.com/sites/tristanlouis/2013/08/31/how-much-is-a-user-worth/#1dadebb692a9[11]^.
Anyone running a business knows that every single user has significant value.
Businesses spend anywhere from $30 to $200 to acquire a user.
Sometimes they pay users directly, other times they pay for advertizing, and still other times entire companies are bought just for their user base.
After a company acquires a user they often given them many free services just to keep them around long enough to monetize them through some other means.

Ripple uses a minimum balance^https://ripple.com/build/reserves/[12]^  that scales with account resource use and requires thatnew accounts get funded with at least this minimum balance.
Currently this minimum balance is about $0.15 which is greater than the $0.10 we estimated would allow someone to transact freely at least once per week.
A blockchain can enforce a minimum value per user through the simple process of requiring a minimum balance.
Any business that wishes to bring a new customer to the blockchain can pre-fund that user’s account with the minimum balance that would allow them to transact.
Requiring a relatively large fee ($1.00) to sign up new users will naturally force anyone offering free accounts to vet the quality and uniqueness of each account before registering them with the blockchain.
Maintaining a minimum balance is effectively the same as making users pay transaction fees with the interest they could have earned on their balance.
The minimum balance is simply the balance required to earn enough interest to pay a fee in a relatively short period of time.
Fortunately, the minimum balance required can be as low as a dollar and this is something users can understand and appreciate.
The opportunity cost of lost interest doesn’t incur the cognitive cost of a micro-fee and is far more acceptable to users.
The STEEM used to pre-fund an account is Powered Up in the new account (i.e., converted to Steem Power).

==== Adjusting the Reserve Ratio

Rate limiting requires that the network adjust the reserve ratio quickly enough to mitigate the impact of an attacker attempting to flood the network.
Let’s assume the attacker has a large balance, say 1% of the available tokens.
If we also assume that the network targets 50% utilization, then a sustained attack should find this user throttled to 25% of network capacity assuming everyone else is also using 25% of the capacity.
Stated another way, the largest single user should never be able to consume more than 50% of the target capacity unless they own more than 50% of the SP.
Let’s use an initial reserve ratio of 200x.
Due to fractional reserves, this means someone holding 1% of the tokens has the right to demand transactions totalling 2x the maximum block size.
In order to bring the network usage of the attacker down to 25% the reserve ratio would have to fall to 25x.
This would cause the minimum balance required to transact once per week to grow by 8x.
The blockchain can establish a response rate that says any sustained increase in usage should be brought down to the target capacity in within a short period of time (say 30 seconds).
An attacker attempting to spam the network shouldn’t be able to disrupt service for normal users for more than a minute.
While reductions in the reserve ratio must be quick and non-linear to counter abuse, increases in the reserve ratio should be slow and linear.
If the network adjusted in both directions in just 30 seconds then an attacker could pulse the network.
A flood of transactions should be corrected in 30 seconds and then take a hour to return to their pre-attack levels.
Under this model the attacker could flood the network for 30 seconds per hour or less than 1% of the time.
There must be a slow constant upward pressure on the reserve ratio any time network usage is below 50% until the network hits the maximum reserve ratio.
The maximum reserve ratio determines the minimum required stake to flood the network in short bursts.
Any user with fewer than `TOTAL_TOKENS / (2*RESERVE_RATIO)`` will be unable to produce enough transactions to fill even a single block.
With a reserve ratio of 200, this means any user with less than 0.25% of the currency cannot create enough transactions to delay anyone’s service.

==== Effectiveness Relative to Fees

To compare the effectiveness of rate limiting to fees we must consider how the two systems react to intentional network flooding by an attacker.
Under Bitcoin an attacker with $10,000 dollars could disrupt service for an entire day by filling every single block.
The same attacker would be unable to disrupt service for even a single block under the dynamic fractional reserve rate limiting approach.
If we go to a more extreme case and assume the attacker holds 1% of all coins then we presume an attacker with $60 million dollars.
Such an attacker could deny the Bitcoin blockchain service for 16 years unless the miners increased fees or capacity.
Even if fees were raised to $15 per transaction, the attacker could still keep the network flooded for 16 days.
Under the rate limiting approach, someone who holds 1% of all coins with an intent to flood
the network would achieve their goal for less than 30 seconds.

==== Renting vs. Buying vs. Time Sharing

When someone owns a house they expect the right to use the house for free.
If a group of people buy a house together then each can expect the right to use the house proportional to their percentage ownership in the house.
A fee based blockchain is like renting the house from its owners, whereas rate limiting is like a timeshare among owners.
If a house is owned by multiple people then those individuals must decide how they wish to timeshare the house.
Someone who owns 50% of the house but only uses it one weekend per year might expect to be paid by the individuals who take their unused time.
This is the mindset of a fee based system.

On the other hand, someone who owns 50% of the house is speculating that demand for the house will increase in the future and they will be able to sell their stake for more.
Any owner who owns more of a house than they use becomes a real estate speculator.
With this mindset rather than collecting rent, they collect appreciation.
The value of a share is derived from how much time it can potentially grant its owner.
Owning 1% of a house and getting it 1 weekend per year is the lowest value of a share.
However, if half of the shareholders never use their weekend, then the value per timeshare rises to 2 weekends per year.
If those inactive users instead opt to rent their unused time, then it falls back to 1 weekend per year.
If those unused timeshares were sold to people who would use them then the value of a timeshare would fall by 50%.
Unless the rent collected is greater than the fall in share value the timeshare owners are making an economic miscalculation.

Using this rationale we can assume that a system based on fees will either be more expensive for its users or be less profitable for its collective owners.
An individual small owner may profit by renting out his small time slice, but only at the expense of all other timeshare owners.
In effect, the cost of the falling timeshare value is shared among all owners whereas the profits are centralized in the single owner who decided to rent his share.

We can conclude from this that a blockchain is best served by not using usage fees at all.
If a usage fee were to be charged as an alternative to rate limiting, then it should be the equivalent of buying enough timeshares and committing to hold them long enough to gain the right use it once.
Stated another way, a transaction fee should be equal to the minimum account balance necessary to transact once per week and it should be refunded at the end of the week.
Assume the minimum account balance is $1 and allows someone to transact once per week.
If someone with a $1 balance that wishes to perform 5 transactions at once they will have to increase their balance to $5 for a week either before or after their transactions.
In theory a market could form where users can borrow the stake required.
In practice it is more efficient for users to simply buy and sell the timeshares necessary to meet their desired usage rate.
In other words, the cost of negotiating micro-loans is greater than the cost of maintaining a balance suitable for your maximum weekly usage.
Decentralized rate limiting of transactions can enable new types of decentralized applications that were not viable when every use of the application required a micropayment.
This new model gives application developers the ability to decide if and when to charge their users for transactions.

